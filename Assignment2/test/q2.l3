
(define empty? (lambda (lst)
                 ( eq? lst '())))
                 
(define last-element
(lambda (lst)
(if (empty? (cdr lst))
(car lst)
 (last-element (cdr lst)))))

(define power
(lambda (n1 n2)
(if (= n2 0)
1
(* n1 (power n1 (- n2 1))))))

(define sum-lst-power
(lambda (lst N)
(if (empty? lst)
0
(+ (power (car lst) N) (sum-lst-power (cdr lst) N)))))

(define length
(lambda (lst)
(if (empty? lst)
0
(+ 1 (length (cdr lst))))))
      
  
(define num-from-digits
(lambda (lst)
(if (empty? lst)
0
(+(/ (* (power 10  (length lst) ) (car lst) ) 10) (num-from-digits (cdr lst)) ))))


  (define is-narcissistic
(lambda (lst)
(
  if(= (num-from-digits lst) (sum-lst-power lst (length lst)))
       #t
      #f
  
 )))

